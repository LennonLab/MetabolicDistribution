aa_Cdist_Ecoli_GC_4 <- CDist(aa_rac_Ecoli_GC_4[,2])
aa_Cdist_Ecoli_GC_5 <- CDist(aa_rac_Ecoli_GC_5[,2])
aa_Cdist_Ecoli_GC_6 <- CDist(aa_rac_Ecoli_GC_6[,2])
aa_Cdist_Ecoli_GC_7 <- CDist(aa_rac_Ecoli_GC_7[,2])
ra_rac_Ecoli_GC_1 <- process(here("data", "GrowthCurve", "EAM_20190531_GrowthCurve", "Specimen1_T1_S.fcs"), "BL1-H", TRUE)
ra_rac_Ecoli_GC_2 <- process(here("data", "GrowthCurve", "EAM_20190531_GrowthCurve", "Specimen1_T2_S.fcs"), "BL1-H", TRUE)
ra_rac_Ecoli_GC_3 <- process(here("data", "GrowthCurve", "EAM_20190531_GrowthCurve", "Specimen1_T3_S.fcs"), "BL1-H", TRUE)
ra_rac_Ecoli_GC_4 <- process(here("data", "GrowthCurve", "EAM_20190531_GrowthCurve", "Specimen1_T4_S.fcs"), "BL1-H", TRUE)
ra_rac_Ecoli_GC_5 <- process(here("data", "GrowthCurve", "EAM_20190531_GrowthCurve", "Specimen1_T5_S.fcs"), "BL1-H", TRUE)
ra_rac_Ecoli_GC_6 <- process(here("data", "GrowthCurve", "EAM_20190531_GrowthCurve", "Specimen1_T6_S.fcs"), "BL1-H", TRUE)
ra_rac_Ecoli_GC_7 <- process(here("data", "GrowthCurve", "EAM_20190531_GrowthCurve", "Specimen1_T7_S.fcs"), "BL1-H", TRUE)
ra_Cdist_Ecoli_GC_1 <- CDist(ra_rac_Ecoli_GC_1[,2])
ra_Cdist_Ecoli_GC_2 <- CDist(ra_rac_Ecoli_GC_2[,2])
ra_Cdist_Ecoli_GC_3 <- CDist(ra_rac_Ecoli_GC_3[,2])
ra_Cdist_Ecoli_GC_4 <- CDist(ra_rac_Ecoli_GC_4[,2])
ra_Cdist_Ecoli_GC_5 <- CDist(ra_rac_Ecoli_GC_5[,2])
ra_Cdist_Ecoli_GC_6 <- CDist(ra_rac_Ecoli_GC_6[,2])
ra_Cdist_Ecoli_GC_7 <- CDist(ra_rac_Ecoli_GC_7[,2])
OD600_Ecoli_GC <- read.table(here("data", "GrowthCurve", "EAM_20190531_GrowthCurve", "20190531_EAM_GrowthCurve.txt"), header = TRUE, sep = "\t")
#fit logistic growth model to growth curve for OD600
coef(lm(logit(OD600_Ecoli_GC$OD600/0.9)~OD600_Ecoli_GC$minutes))
growthcurve_OD<-nls(OD600_Ecoli_GC$OD600~phi1/(1+exp(-(phi2+phi3*OD600_Ecoli_GC$minutes))),
start=list(phi1=0.9,phi2=-2.805,phi3=0.031), data = OD600_Ecoli_GC, trace=TRUE)
phi1_OD<-coef(growthcurve_OD)[1]
phi2_OD<-coef(growthcurve_OD)[2]
phi3_OD<-coef(growthcurve_OD)[3]
x<-c(min(OD600_Ecoli_GC$minutes):max(OD600_Ecoli_GC$minutes))
y<-phi1_OD/(1+exp(-(phi2_OD+phi3_OD*x)))
predict_OD600<-data.frame(x,y)
#fit logistic growth model to growth curve for abs_count
coef(lm(logit(OD600_Ecoli_GC$abs_count/490000000)~OD600_Ecoli_GC$minutes))
growthcurve_ac<-nls(OD600_Ecoli_GC$abs_count~phi1/(1+exp(-(phi2+phi3*OD600_Ecoli_GC$minutes))),
start=list(phi1=490000000,phi2=-3.162,phi3=0.031), data = OD600_Ecoli_GC, trace=TRUE)
phi1_ac<-coef(growthcurve_ac)[1]
phi2_ac<-coef(growthcurve_ac)[2]
phi3_ac<-coef(growthcurve_ac)[3]
y<-phi1_ac/(1+exp(-(phi2_ac+phi3_ac*x)))
predict_abscount<-data.frame(x,y)
#generate png file
png(here("output", "GrowthCurve.OD600_abscount_fits.png"),
width = 900, height = 900, res = 96*2)
par(fig=c(0,1,0.35,1))
color <- c("red", "orange", "yellow", "green", "cyan", "blue", "purple")
plot(OD600_Ecoli_GC$minutes, OD600_Ecoli_GC$OD600, col = color, pch = 19, cex = 1, ylab = "", xlab= "", yaxt = "n", xaxt = "n")
mtext("Time(mins)", side = 1, line = 1.1, cex = 0.8)
mtext("OD600", side = 2, line = 1.1, cex = 0.8)
axis(2,cex.axis=0.7,  mgp = c(3, 0.5, 0))
axis(1, cex.axis = 0.7,  mgp = c(3, 0.5, 0))
lines(predict_OD600)
par(fig=c(0,1,0,0.65), new = TRUE)
color <- c("red", "orange", "yellow", "green", "cyan", "blue", "purple")
plot(OD600_Ecoli_GC$minutes, OD600_Ecoli_GC$abs_count, col = color, pch = 19, cex = 1, ylab = "", xlab= "", yaxt = "n", xaxt = "n")
mtext("Time(mins)", side = 1, line = 1.1, cex = 0.8)
mtext("abs. count", side = 2, line = 1.1, cex = 0.8)
axis(2,cex.axis=0.7,  mgp = c(3, 0.5, 0))
axis(1, cex.axis = 0.7,  mgp = c(3, 0.5, 0))
lines(predict_abscount)
dev.off()
#generate png file
png(here("output", "GrowthCurve.RSGdistribution.png"),
width = 900, height = 900, res = 96*2)
par(fig=c(0,1,0.4,1))
color <- c("red", "orange", "yellow", "green", "cyan", "blue", "purple")
plot(OD600_Ecoli_GC$minutes, OD600_Ecoli_GC$OD600, col = color, pch = 19, cex = 1, ylab = "", xlab= "", yaxt = "n", xaxt = "n")
mtext("Time(mins)", side = 1, line = 1.1, cex = 0.8)
mtext("OD600", side = 2, line = 1.1, cex = 0.8)
axis(2,cex.axis=0.7,  mgp = c(3, 0.5, 0))
axis(1, cex.axis = 0.7,  mgp = c(3, 0.5, 0))
lines(predict_OD600)
par(fig=c(0,0.55,0,0.65), new=TRUE)
plot(ra_rac_Ecoli_GC_7[,1], log(ra_rac_Ecoli_GC_7[,2]), type = 'p', xlab = "", ylab = "", cex = 0.25, col = "red", yaxt = "n", xaxt = "n")
mtext("Rank in activity", side = 1, line = 1.1, cex = 0.8)
mtext("log(RSG-H value)", side = 2, line = 1.1, cex = 0.8)
axis(2,cex.axis=0.7,  mgp = c(3, 0.5, 0))
axis(1, cex.axis = 0.7, mgp = c(3, 0.5, 0))
points(ra_rac_Ecoli_GC_2[,1], log(ra_rac_Ecoli_GC_2[,2]), type = 'p', cex = 0.25, col = "orange")
points(ra_rac_Ecoli_GC_3[,1], log(ra_rac_Ecoli_GC_3[,2]), type = 'p', cex = 0.25, col = "yellow")
points(ra_rac_Ecoli_GC_4[,1], log(ra_rac_Ecoli_GC_4[,2]), type = 'p', cex = 0.25, col = "green")
points(ra_rac_Ecoli_GC_5[,1], log(ra_rac_Ecoli_GC_5[,2]), type = 'p', cex = 0.25, col = "cyan")
points(ra_rac_Ecoli_GC_6[,1], log(ra_rac_Ecoli_GC_6[,2]), type = 'p', cex = 0.25, col = "blue")
points(ra_rac_Ecoli_GC_1[,1], log(ra_rac_Ecoli_GC_1[,2]), type = 'p', cex = 0.25, col = "purple")
box()
par(fig=c(0.45,1,0,0.65), new=TRUE)
plot(ra_Cdist_Ecoli_GC_1[,2], ra_Cdist_Ecoli_GC_1[,1], type = 'p', xlab = "", ylab = "", cex = 0.25, col = "red", yaxt = "n", xaxt = "n")
mtext("% of rank-ordered cells \ncontributing to activity", side = 1, line = 2, cex = 0.8)
mtext("Cumulative % \nRSG activity", side = 2, line = 1.1, cex = 0.8)
axis(2, at = c(0,20,40,60,80,100), labels = c("0","20","40","60","80","100"), cex.axis=0.7, mgp = c(3,0.5,0))
axis(1, cex.axis = 0.7, mgp = c(3,0.5,0), at = c(0,20,40,60,80,100), labels = TRUE)
points(ra_Cdist_Ecoli_GC_2[,2], ra_Cdist_Ecoli_GC_2[,1], type = 'p', cex = 0.25, col = "orange")
points(ra_Cdist_Ecoli_GC_3[,2], ra_Cdist_Ecoli_GC_3[,1], type = 'p', cex = 0.25, col = "yellow")
points(ra_Cdist_Ecoli_GC_4[,2], ra_Cdist_Ecoli_GC_4[,1], type = 'p', cex = 0.25, col = "green")
points(ra_Cdist_Ecoli_GC_5[,2], ra_Cdist_Ecoli_GC_5[,1], type = 'p', cex = 0.25, col = "cyan")
points(ra_Cdist_Ecoli_GC_6[,2], ra_Cdist_Ecoli_GC_6[,1], type = 'p', cex = 0.25, col = "blue")
points(ra_Cdist_Ecoli_GC_7[,2], ra_Cdist_Ecoli_GC_7[,1], type = 'p', cex = 0.25, col = "purple")
box()
dev.off()
OD600 <- function(x) (phi1_OD/(1+exp(-(phi2_OD+phi3_OD*x))))
curve(OD600, 0, 250, ylab = "OD600=f(minutes)")
deriv_OD600 <- function(x) {}
body(deriv_OD600) <- D(body(OD600), 'x')
curve(deriv_OD600, 0, 250, ylab = "f'(minutes)")
deriv <- deriv_OD600(OD600_Ecoli_GC$minutes)
abs_count <- function(x) (phi1_ac/(1+exp(-(phi2_ac+phi3_ac*x))))
curve(abs_count, 0, 250, ylab = "abs_count=f(minutes)")
deriv_abs_Count <- function(x){}
body(deriv_abs_Count) <- D(body(abs_count), 'x')
curve(deriv_abs_Count, 0, 250, ylab = "f'(minutes)")
der_abs_count <- deriv_abs_Count(OD600_Ecoli_GC$minutes)
pareto_ra_rac_Ecoli_GC_1 <- fitdist(ra_rac_Ecoli_GC_1[,2], "pareto", start = list(shape = 0.1, scale = 10))
pareto_ra_rac_Ecoli_GC_2 <- fitdist(ra_rac_Ecoli_GC_2[,2], "pareto", start = list(shape = 0.1, scale = 10))
pareto_ra_rac_Ecoli_GC_3 <- fitdist(ra_rac_Ecoli_GC_3[,2], "pareto", start = list(shape = 0.1, scale = 10))
pareto_ra_rac_Ecoli_GC_4 <- fitdist(ra_rac_Ecoli_GC_4[,2], "pareto", start = list(shape = 0.1, scale = 10))
pareto_ra_rac_Ecoli_GC_5 <- fitdist(ra_rac_Ecoli_GC_5[,2], "pareto", start = list(shape = 0.1, scale = 10))
pareto_ra_rac_Ecoli_GC_6 <- fitdist(ra_rac_Ecoli_GC_6[,2], "pareto", start = list(shape = 0.1, scale = 10))
pareto_ra_rac_Ecoli_GC_7 <- fitdist(ra_rac_Ecoli_GC_7[,2], "pareto", start = list(shape = 0.1, scale = 10))
shape <- data.frame()
scale <- data.frame()
shapescale <- list(pareto_ra_rac_Ecoli_GC_1, pareto_ra_rac_Ecoli_GC_2, pareto_ra_rac_Ecoli_GC_3, pareto_ra_rac_Ecoli_GC_4, pareto_ra_rac_Ecoli_GC_5, pareto_ra_rac_Ecoli_GC_6, pareto_ra_rac_Ecoli_GC_7)
for(n in shapescale){
shape <- rbind(shape, n$estimate[1])
scale <- rbind(scale, n$estimate[2])
}
GC <- data.frame(deriv, OD600_Ecoli_GC$OD600, OD600_Ecoli_GC$abs_count, shape, scale)
names(GC) <- c("SGR", "OD600", "abs_count", "shape", "scale")
plot(GC$abs_count, GC$scale)
png(here("output", "GrowthCurve.Pareto_parameters.png"),
width = 900, height = 900, res = 96*2)
par(fig=c(0,0.5,0.5,1))
plot(GC$OD600, log(GC$shape), type = 'p', pch = 19, ylab = "", xlab = "", yaxt = "n", xaxt = "n", col = "red")
mtext("OD600", side = 1, line = 1.2, cex = 0.8)
mtext("log(shape)", side = 2, line = 1.1, cex = 0.8)
axis(2,cex.axis=0.7,  mgp = c(3, 0.5, 0))
axis(1, cex.axis = 0.7,  mgp = c(3, 0.5, 0))
par(fig=c(0.5,1,0.5,1), new = TRUE)
plot(GC$OD600, log(GC$scale), type = 'p', pch = 19, ylab = "", xlab = "", yaxt = "n", xaxt = "n", col = "red")
mtext("OD600", side = 1, line = 1.2, cex = 0.8)
mtext("log(scale)", side = 2, line = 1.1, cex = 0.8)
axis(2,cex.axis=0.7,  mgp = c(3, 0.5, 0))
axis(1, cex.axis = 0.7,  mgp = c(3, 0.5, 0))
par(fig=c(0,0.5,0.25,0.75), new = TRUE)
plot(GC$SGR, log(GC$shape), type = 'p', pch = 19, ylab = "", xlab = "", yaxt = "n", xaxt = "n", col = "blue")
mtext("?", side = 1, line = 1.2, cex = 0.8)
mtext("log(shape)", side = 2, line = 1.1, cex = 0.8)
axis(2,cex.axis=0.7,  mgp = c(3, 0.5, 0))
axis(1, cex.axis = 0.7,  mgp = c(3, 0.5, 0))
par(fig=c(0.5,1,0.25,0.75), new = TRUE)
plot(GC$SGR, log(GC$scale), type = 'p', pch = 19, ylab = "", xlab = "", yaxt = "n", xaxt = "n", col = "blue")
mtext("?", side = 1, line = 1.2, cex = 0.8)
mtext("log(scale)", side = 2, line = 1.1, cex = 0.8)
axis(2,cex.axis=0.7,  mgp = c(3, 0.5, 0))
axis(1, cex.axis = 0.7,  mgp = c(3, 0.5, 0))
par(fig=c(0,0.5,0,0.5), new = TRUE)
plot(GC$abs_count, log(GC$shape), type = 'p', pch = 19, ylab = "", xlab = "", yaxt = "n", xaxt = "n")
mtext("abs. count", side = 1, line = 1.2, cex = 0.8)
mtext("log(shape)", side = 2, line = 1.1, cex = 0.8)
axis(2,cex.axis=0.7,  mgp = c(3, 0.5, 0))
axis(1, cex.axis = 0.7,  mgp = c(3, 0.5, 0))
par(fig=c(0.5,1,0,0.5), new = TRUE)
plot(GC$abs_count, log(GC$scale), type = 'p', pch = 19, ylab = "", xlab = "", yaxt = "n", xaxt = "n")
mtext("abs.count", side = 1, line = 1.2, cex = 0.8)
mtext("log(scale)", side = 2, line = 1.1, cex = 0.8)
axis(2,cex.axis=0.7,  mgp = c(3, 0.5, 0))
axis(1, cex.axis = 0.7,  mgp = c(3, 0.5, 0))
dev.off()
#relative abundance
ra_rac_Spo0A_1day_S1 <- process(here("data", "MURI", "EAM_20190403_MURI_1day", "Stained_0S1.fcs"), "BL1-H", TRUE)
ra_rac_Spo0A_10day_S1 <- process(here("data", "MURI", "EAM_20190403_MURI_10day", "Specimen1_1S2.fcs"), "BL1-H", TRUE)
ra_rac_Spo0A_100day_S1 <- process(here("data", "MURI", "EAM_20190403_MURI_100day", "Stained_2S1-1.fcs"), "BL1-H", TRUE)
ra_Cdist_Spo0A_1day_S1 <- CDist(ra_rac_Spo0A_1day_S1[,2])
ra_Cdist_Spo0A_10day_S1 <- CDist(ra_rac_Spo0A_10day_S1[,2])
ra_Cdist_Spo0A_100day_S1 <- CDist(ra_rac_Spo0A_100day_S1[,2])
#absolute abundance
aa_rac_Spo0A_1day_S1 <- process(here("data", "MURI", "EAM_20190403_MURI_1day", "Stained_0S1.fcs"), "BL1-H")
aa_rac_Spo0A_10day_S1 <- process(here("data", "MURI", "EAM_20190403_MURI_10day", "Specimen1_1S2.fcs"), "BL1-H")
aa_rac_Spo0A_100day_S1 <- process(here("data", "MURI", "EAM_20190403_MURI_100day", "Stained_2S1-1.fcs"), "BL1-H")
aa_Cdist_Spo0A_1day_S1 <- CDist(aa_rac_Spo0A_1day_S1[,2])
aa_Cdist_Spo0A_10day_S1 <- CDist(aa_rac_Spo0A_10day_S1[,2])
aa_Cdist_Spo0A_100day_S1 <- CDist(aa_rac_Spo0A_100day_S1[,2])
aa_1day_rare <- sample_n(aa_rac_Spo0A_1day_S1, length(aa_rac_Spo0A_100day_S1[,2]))
aa_10day_rare <- sample_n(aa_rac_Spo0A_10day_S1,length(aa_rac_Spo0A_100day_S1[,2]))
aa_1day_rare <- RAC(aa_1day_rare[,2])
aa_10day_rare <- RAC(aa_10day_rare[,2])
aa_Cdist_1day_rare <- CDist(aa_1day_rare[,2])
aa_Cdist_10day_rare <- CDist(aa_10day_rare[,2])
# create a vector of histogram breaks
x_1 <- as.integer(seq(0,max(aa_1day_rare[,2]),length=100))
x_10 <- as.integer(seq(0, max(aa_10day_rare[,2]), length=100))
x_100 <- as.integer(seq(0, max(aa_rac_Spo0A_100day_S1[,2]), length = 100))
# histogram the data
hst_1 <- hist(aa_1day_rare[,2], breaks=x_1)
hst_10 <- hist(aa_10day_rare[,2], breaks = x_10)
hst_100 <- hist(aa_rac_Spo0A_100day_S1[,2], breaks = x_100)
# # fit a lognormal distribution
# fit_lognormal_100 <- fitdistr(as.integer(hst_100$counts),"lognormal")
# fit_lognormal_10 <- fitdistr(as.integer(hst_10$mids), "lognormal")
# fit_lognormal_1 <- fitdistr(as.integer(hst_1$mids), "lognormal")
# fit_poisson_1 <- fitdistr(as.integer(hst_1$counts), "poisson")
# fit_poisson_10 <- fitdistr(as.integer(hst_10$counts), "poisson")
# fit_poisson_100 <- fitdistr(as.integer(hst_100$counts), "poisson")
#
# AIC(fit_lognormal_100, fit_poisson_100)
# AIC(fit_lognormal_10, fit_poisson_10)
# AIC(fit_lognormal_1, fit_poisson_1)
#
# # generate values given our fit parameters
# fit_1 <- dlnorm(x_1, fit_lognormal_1$estimate['meanlog'], fit_lognormal_1$estimate['sdlog'])
# fit_10 <- dlnorm(x_10, fit_lognormal_10$estimate['meanlog'], fit_lognormal_10$estimate['sdlog'])
# fit_100 <- dlnorm(x_100, fit_lognormal_100$estimate['meanlog'], fit_lognormal_100$estimate['sdlog'])
# fit_1 <- dpois(x_1, fit_poisson_1$estimate['lambda'])
# fit_10 <- dpois(x_10, fit_poisson_10$estimate['lambda'])
# fit_100 <- dpois(x_100, fit_poisson_100$estimate['lambda'])
#
# # plot the fit and original distributions
#
# plot(x_1, fit_1, type="l", ylab="Density",xlab="X")
# title(main = "Density histogram with lognormal fit")
# lines(hst_1$mid, hst_1$density, type="l", col="red")
# legend(8,0.15,legend=c("Fit","Data"),lty=c(1,1),col=c("black","red"))
#
# plot(x_10, fit_10, type="l", ylab="Density", xlab="X", xlim = c(0, max(hst_10$mids)), ylim = c(0, max(hst_10$density)))
# title(main = "Density histogram with lognormal fit")
# lines(hst_10$mid, hst_10$density, type="l", col="red")
# legend(8,0.15,legend=c("Fit","Data"),lty=c(1,1),col=c("black","red"))
#
# plot(x_100, fit_100, type="l", ylab="Density",
#      xlab="X", ylim=c(0,max(hst_100$density)), xlim=c(0,max(hst_100$mid)))
# title(main = "Density histogram with lognormal fit")
# lines(hst_100$mid, hst_100$density, type="l", col="red")
# legend(8,0.15,legend=c("Fit","Data"),lty=c(1,1),col=c("black","red"))
png(here("output", "MURI.Spo0A_RSG_aaCDF_rare.png"),
width = 1800, height = 900, res = 96*2)
par(fig=c(0,0.5,0,1))
plot(aa_rac_Spo0A_100day_S1[,1], log(aa_rac_Spo0A_100day_S1[,2]), type = 'p', axes = F, xlab = "Rank in activity", ylab = "", las = 1, cex.lab = 1.4, cex.axis = 1.25, col = "blue")
mtext("log(RSG-H value)", side = 2, line = 3, cex = 1.4)
points(aa_10day_rare[,1], log(aa_10day_rare[,2]), type = 'p', col = "red")
points(aa_1day_rare[,1], log(aa_1day_rare[,2]), type = 'p', col = "black")
legend(10000,4.5, c("1 day", "10 day", "100 day"), c("black", "red", "blue"), cex = 1)
box()
axis(side = 1, labels = T, cex.axis = 1.25)
axis(side = 2, las = 1, cex.axis = 1.25)
par(fig=c(0.5,1,0,1), new = TRUE)
plot(aa_Cdist_Spo0A_100day_S1[,2], aa_Cdist_Spo0A_100day_S1[,1], type = 'p', axes = F, xlab = "", ylab = "", las = 1, col = "blue")
mtext("% of rank-ordered cells \n contributing to activity", side = 1, line = 3.5)
mtext("Cumulative % \n RedoxSensor Green activity", side = 2, line = 2.5)
points(aa_Cdist_10day_rare[,2], aa_Cdist_10day_rare[,1], type = 'p', col = "red", cex = 0.75)
points(aa_Cdist_1day_rare[,2], aa_Cdist_1day_rare[,1], type = 'p', col = "black", cex = 0.75)
abline(1,1)
box()
axis(side = 1, labels = T)
axis(side = 2, las = 1)
legend(65,30, c("1 day", "10 day", "100 day"), c("black", "red", "blue"))
text(90,80, "1:1")
mtext("Absolute abundance", outer = TRUE, cex = 2, line =-2.5)
dev.off()
hist <- hist(aa_rac_Spo0A_100day_S1[,2], breaks = 100)
hist.dat <- data.frame(log10(hist$mids),log10(hist$counts),log10(hist$density))
colnames(hist.dat)<- c("mids", "counts", "density")
hist.dat <- hist.dat[is.finite(hist.dat$density),]
lm <- lm(hist.dat$density~hist.dat$mids)
summary(lm)
plot(hist.dat$density ~ hist.dat$mids)
abline(lm)
# fit_1_hist <- ggplot(aa_rac_Spo0A_100day_S1, aes(aa_rac_Spo0A_100day_S1[,2]))+
#   geom_histogram(binwidth = 10)+
#   xlab("Tau")+
#   ylab("Biomass Production (uM C/hr)")+
#   geom_smooth(method = "lm", formula = y~x)+
#   stat_poly_eq(aes(label =  paste(stat(rr.label), "*\" and \"*", stat(p.value.label), sep = "")),
#                formula = y~x, parse = TRUE, size = 4)+
#   scale_x_continuous(labels = label_math(expr = 10^.x, format = force))
#
# fit_1_hist
png(here("output", "MURI.Spo0A_RSG_ra_aa.png"),
width = 1800, height = 900, res = 96*2)
par(fig=c(0,0.5,0,1))
plot(ra_rac_Spo0A_1day_S1[,1], log(ra_rac_Spo0A_1day_S1[,2]), type = 'p', axes = F, xlab = "Rank in activity", ylab = "", las = 1, cex.lab = 1.4, cex.axis = 1.25)
mtext("log(RSG-H value)", side = 2, line = 3, cex = 1.4)
mtext("Relative abundance", side = 3, line = 1, cex = 2)
points(ra_rac_Spo0A_10day_S1[,1], log(ra_rac_Spo0A_10day_S1[,2]), type = 'p', col = "red")
points(ra_rac_Spo0A_100day_S1[,1], log(ra_rac_Spo0A_100day_S1[,2]), type = 'p', col = "blue")
box()
axis(side = 1, labels = T, cex.axis = 1.25)
axis(side = 2, las = 1, cex.axis = 1.25)
par(fig=c(0.5,1,0,1), new = TRUE)
plot(aa_rac_Spo0A_1day_S1[,1], log(aa_rac_Spo0A_1day_S1[,2]), type = 'p', axes = F, xlab = "Rank in activity", ylab = "", las = 1, cex.lab = 1.4, cex.axis = 1.25)
mtext("log(RSG-H value)", side = 2, line = 3, cex = 1.4)
mtext("Absolute abundance", side = 3, line = 1, cex = 2)
points(aa_rac_Spo0A_10day_S1[,1], log(aa_rac_Spo0A_10day_S1[,2]), type = 'p', col = "red")
points(aa_rac_Spo0A_100day_S1[,1], log(aa_rac_Spo0A_100day_S1[,2]), type = 'p', col = "blue")
legend(10000,4.5, c("1 day", "10 day", "100 day"), c("black", "red", "blue"), cex = 1)
box()
axis(side = 1, labels = T, cex.axis = 1.25)
axis(side = 2, las = 1, cex.axis = 1.25)
dev.off()
#MURI lines absolute abundance CDF and RAC
png(here("output", "MURI.Spo0A_RSG_aaCDF.png"),
width = 1800, height = 900, res = 96*2)
par(fig=c(0,0.5,0,1))
plot(aa_rac_Spo0A_1day_S1[,1], log(aa_rac_Spo0A_1day_S1[,2]), type = 'p', axes = F, xlab = "", ylab = "", las = 1, ylim = c(0,15))
mtext("Rank in activity", side = 1, line = 2.75, cex = 1)
mtext("log(RedoxSensor Green activity)", side = 2, line = 2.75, cex = 1)
points(aa_rac_Spo0A_10day_S1[,1], log(aa_rac_Spo0A_10day_S1[,2]), type = 'p', col = "red", cex = 0.75)
points(aa_rac_Spo0A_100day_S1[,1], log(aa_rac_Spo0A_100day_S1[,2]), type = 'p', col = "blue", cex = 0.75)
box()
axis(side = 1, labels = T)
axis(side = 2, las = 1)
par(fig=c(0.5,1,0,1), new = TRUE)
plot(aa_Cdist_Spo0A_1day_S1[,2], aa_Cdist_Spo0A_1day_S1[,1], type = 'p', axes = F, xlab = "", ylab = "", las = 1)
mtext("% of rank-ordered cells \n contributing to activity", side = 1, line = 3.5)
mtext("Cumulative % \n RedoxSensor Green activity", side = 2, line = 2.5)
points(aa_Cdist_Spo0A_10day_S1[,2], aa_Cdist_Spo0A_10day_S1[,1], type = 'p', col = "red", cex = 0.75)
points(aa_Cdist_Spo0A_100day_S1[,2], aa_Cdist_Spo0A_100day_S1[,1], type = 'p', col = "blue", cex = 0.75)
abline(1,1)
box()
axis(side = 1, labels = T)
axis(side = 2, las = 1)
legend(65,30, c("1 day", "10 day", "100 day"), c("black", "red", "blue"))
text(90,80, "1:1")
mtext("Absolute abundance", outer = TRUE, cex = 2, line =-2.5)
dev.off()
#MURI lines relative abundance CDF and RAC
png(here("output", "MURI.Spo0A_RSG_raCDF.png"),
width = 1800, height = 900, res = 96*2)
par(fig=c(0,0.5,0,1))
plot(ra_rac_Spo0A_1day_S1[,1], log(ra_rac_Spo0A_1day_S1[,2]), type = 'p', axes = F, xlab = "", ylab = "", las = 1, ylim = c(-15,0))
mtext("Rank in activity", side = 1, line = 2.75, cex = 1)
mtext("log(RedoxSensor Green activity)", side = 2, line = 2.75, cex = 1)
points(ra_rac_Spo0A_10day_S1[,1], log(ra_rac_Spo0A_10day_S1[,2]), type = 'p', col = "red", cex = 0.75)
points(ra_rac_Spo0A_100day_S1[,1], log(ra_rac_Spo0A_100day_S1[,2]), type = 'p', col = "blue", cex = 0.75)
box()
axis(side = 1, labels = T)
axis(side = 2, las = 1)
par(fig=c(0.5,1,0,1), new = TRUE)
plot(ra_Cdist_Spo0A_1day_S1[,2], ra_Cdist_Spo0A_1day_S1[,1], type = 'p', axes = F, xlab = "", ylab = "", las = 1)
mtext("% of rank-ordered cells \n contributing to activity", side = 1, line = 3.5)
mtext("Cumulative % \n RedoxSensor Green activity", side = 2, line = 2.5)
points(ra_Cdist_Spo0A_10day_S1[,2], ra_Cdist_Spo0A_10day_S1[,1], type = 'p', col = "red", cex = 0.75)
points(ra_Cdist_Spo0A_100day_S1[,2], ra_Cdist_Spo0A_100day_S1[,1], type = 'p', col = "blue", cex = 0.75)
legend(65,30, c("1 day", "10 day", "100 day"), c("black", "red", "blue"))
abline(1,1)
text(90,80, "1:1")
box()
axis(side = 1, labels = T)
axis(side = 2, las = 1)
mtext("Relative abundance", outer = TRUE, cex = 2, line =-2.5)
dev.off()
rm(list = ls())
getwd()
library('ggpmisc')
package.list <- c('BiocManager', 'vegan', 'fitdistrplus', 'ggplot2', 'car', 'here', 'ggcyto', 'actuar', 'tibble', 'ggpubr', 'scales', 'dplyr', 'ggpmisc', 'gdata')
for (package in package.list) {
if (!require(package, character.only=T, quietly=T)) {
install.packages(package, dependencies = TRUE)
library(package, character.only=T)
} }
BiocManager::valid()
# BiocManager::install("flowCore")
# BiocManager::install("ggcyto")
# BiocManager::install()
here()
my.cols <- RColorBrewer::brewer.pal(n = 4, name = "Greys")[3:4]
# Set theme for figures in the paper
theme_set(theme_classic() +
theme(axis.title = element_text(size = 16),
axis.title.x = element_text(margin = margin(t = 15, b = 15)),
axis.title.y = element_text(margin = margin(l = 15, r = 15)),
axis.text = element_text(size = 14),
axis.text.x = element_text(margin = margin(t = 5)),
axis.text.y = element_text(margin = margin(r = 5)),
#axis.line.x = element_line(size = 1),
#axis.line.y = element_line(size = 1),
axis.line.x = element_blank(),
axis.line.y = element_blank(),
axis.ticks.x = element_line(size = 1),
axis.ticks.y = element_line(size = 1),
axis.ticks.length = unit(.1, "in"),
panel.border = element_rect(color = "black", fill = NA, size = 1.5),
legend.title = element_blank(),
legend.text = element_text(size = 14),
strip.text = element_text(size = 14),
strip.background = element_blank()
))
RAC <- function(x = ""){
x = as.vector(x)
x.ab = x[x >0]
rac = x.ab[order(x.ab, decreasing = TRUE)]
ranks <- as.vector(seq(1,length(rac)))
rac <- cbind(ranks, rac)
return(as.data.frame(rac))
}
processmultiple <- function(x = "", channel = "", scale = "", name = "", desc = ""){
n <- 1
mynames <- list()
#make a list with names of cat(name,desc, sep = "_")
raclist <- list()
for(file in x){
mynames <- cbind(mynames, cat(name,desc,sep = "_"))
}
for (file in x){
if(scale == TRUE){
fcs <- flowCore::read.FCS(file = file, transformation = "scale")
}
else{
fcs <- flowCore::read.FCS(file = file)
}
flow <- flowCore::exprs(fcs)
channel <- as.data.frame(flow[,channel])
rac <- RAC(x = channel)
ranks <- as.vector(seq(1,length(rac)))
rac <- cbind(ranks, rac)
raclist[[n]] <- as.data.frame(rac)
n <- n + 1
}
names(raclist) <- mynames
return(raclist)
}
process <- function(x = "", channel = "", scale = ""){
if(scale == TRUE){
fcs <- flowCore::read.FCS(file = x, transformation = "scale")
}
else{
fcs <- flowCore::read.FCS(file = x)
}
flow <- flowCore::exprs(fcs)
RSG_H <- as.data.frame(flow[,channel])
rac <- RAC(x = RSG_H)
return(rac)
}
BP_fxn <- function(CPMs, Samples, set){
##extract whole experiment info from top of csv
#date experiment was run
date <- as.Date(as.character(CPMs[1,2]), "%m/%d/%Y")
#date the standard was produced
date_std <- as.Date(as.character(CPMs[2,2]), "%m/%d/%Y")
#DPM of the standard at date of production
DPM_std <- as.double(as.character(CPMs[3,2]))
#DPM of the standard based on scintillation counter on experiment date
DPM_curr <- as.double(as.character(CPMs[4,2]))
#half life of tritium - 12.346 years
half_life <- as.double(as.character(CPMs[5,2]))
#Mols of leucine in each tube based on hot leucine stock concentration
M_Leu <- as.double(as.character(CPMs[6,2]))
#CPMs of the voucher on experiment date
Voucher <- as.double(as.character(CPMs[7,2]))
##remove whole experiment info from top of dataframe
CPMs <- CPMs[-c(1:9),]
colnames(CPMs) <- c("Sample", "CPM", "Kill")
##calculate time from the experiment date to the standard production date
t <- as.numeric(date - date_std)/365
##calculate the expected DPMs of the standard based on t
DPM_exp <- (DPM_std)*exp((-0.693/half_life)*t)
##calculate scintillation efficiency as DPM ratio
efficiency <- DPM_curr/DPM_exp
#divide CPMs into kill and sample dataframes
Kills <- subset(CPMs, Kill == "T")
CPMs <- subset(CPMs, Kill == "F")
#convert CPMs to DPMs, DPMs = CPMs/efficiency
CPMs$CPM <- as.numeric(as.character(CPMs$CPM))
CPMs$DPM <- CPMs$CPM / efficiency
Kills$CPM <- as.numeric(as.character(Kills$CPM))
Kills$DPM <- Kills$CPM / efficiency
#average DPMs for each sample and add to Tau
for(x in unique(CPMs$Sample)){
Samples[Samples$Sample == x, "DPM"] <- as.numeric(mean(CPMs[CPMs$Sample == x, "DPM"]))
}
#for each sample, subtract the corresponding kill DPM
for (x in unique(Samples$Sample)){
if(Samples[Samples$Sample == x, "Set"] == set){
Samples[Samples$Sample == x, "DPMKills"] <- Samples[Samples$Sample ==x, "DPM"] - (as.numeric(Kills[Kills$Sample == x, "CPM"])/efficiency)
}
}
#Determine Mols Leucine based on MLeu_sample = MLeu * DPM/voucher
Samples$MLeu <- (M_Leu * Samples$DPMKills)/Voucher
#Convert MLeu to ug C/L/hr
Samples$ugCLhr <- Samples$MLeu * 131.2 * (1/0.073)*0.86*2*1000000
Samples$uMChr <- Samples$ugCLhr *0.083333
Samples$log_uMChr <- log(Samples$uMChr, 10)
return(Samples)
}
MD_RTLC_01_RSG <- process(here("data", "MetDistRA21", "20210729_RTLC_S3_SYBR_RSG_ATP", "E6_2.875Ra.fcs"), "B530-H")
MD_RTLC_02_RSG <- process(here("data", "MetDistRA21", "20210729_RTLC_S3_SYBR_RSG_ATP", "G6_3.25Ra.fcs"), "B530-H")
MD_RTLC_03_RSG <- process(here("data", "MetDistRA21", "20210729_RTLC_S3_SYBR_RSG_ATP", "A7_3.875Ra.fcs"), "B530-H")
MD_RTLC_04_RSG <- process(here("data", "MetDistRA21", "20210729_RTLC_S3_SYBR_RSG_ATP", "C7_4.125Ra.fcs"), "B530-H")
MD_RTLC_05_RSG <- process(here("data", "MetDistRA21", "20210729_RTLC_S3_SYBR_RSG_ATP", "E7_4.375Ra.fcs"), "B530-H")
MD_RTLC_06_RSG <- process(here("data", "MetDistRA21", "20210729_RTLC_S3_SYBR_RSG_ATP", "G7_4.625Ra.fcs"), "B530-H")
MD_RTLC_07_RSG <- process(here("data", "MetDistRA21", "20210729_RTLC_S3_SYBR_RSG_ATP", "A8_4.875Ra.fcs"), "B530-H")
MD_RTLC_08_RSG <- process(here("data", "MetDistRA21", "20210729_RTLC_S3_SYBR_RSG_ATP", "C8_5.125Ra.fcs"), "B530-H")
MD_RTLC_09_RSG <- process(here("data", "MetDistRA21", "20210729_RTLC_S3_SYBR_RSG_ATP", "E8_5.375Ra.fcs"), "B530-H")
MD_RTLC_10_RSG <- process(here("data", "MetDistRA21", "20210729_RTLC_S3_SYBR_RSG_ATP", "G8_5.625Ra.fcs"), "B530-H")
MD_RSG <- as.data.frame(MD_RTLC_01_RSG$rac)
MD_RSG <- cbindX(MD_RSG, as.data.frame(MD_RTLC_02_RSG$rac), as.data.frame(MD_RTLC_03_RSG$rac), as.data.frame(MD_RTLC_04_RSG$rac), as.data.frame(MD_RTLC_05_RSG$rac), as.data.frame(MD_RTLC_06_RSG$rac), as.data.frame(MD_RTLC_07_RSG$rac), as.data.frame(MD_RTLC_08_RSG$rac), as.data.frame(MD_RTLC_09_RSG$rac), as.data.frame(MD_RTLC_10_RSG$rac))
colnames(MD_RSG) <- c("MD_RTLC_01", "MD_RTLC_02", "MD_RTLC_03", "MD_RTLC_04", "MD_RTLC_05", "MD_RTLC_06", "MD_RTLC_07", "MD_RTLC_08", "MD_RTLC_09", "MD_RTLC_10")
write.csv(MD_RSG, here('data', 'MetDistRA21', 'MD_RSG.csv'))
MD_RTLC_01_ATP <- process(here("data", "MetDistRA21", "20210729_RTLC_S3_SYBR_RSG_ATP", "A9_2.875Aa.fcs"), "B586-H")
MD_RTLC_02_ATP <- process(here("data", "MetDistRA21", "20210729_RTLC_S3_SYBR_RSG_ATP", "C9_3.25Aa.fcs"), "B586-H")
MD_RTLC_03_ATP <- process(here("data", "MetDistRA21", "20210729_RTLC_S3_SYBR_RSG_ATP", "E9_3.875Aa.fcs"), "B586-H")
MD_RTLC_04_ATP <- process(here("data", "MetDistRA21", "20210729_RTLC_S3_SYBR_RSG_ATP", "G9_4.125Aa.fcs"), "B586-H")
MD_RTLC_05_ATP <- process(here("data", "MetDistRA21", "20210729_RTLC_S3_SYBR_RSG_ATP", "A10_4.375Aa.fcs"), "B586-H")
MD_RTLC_06_ATP <- process(here("data", "MetDistRA21", "20210729_RTLC_S3_SYBR_RSG_ATP", "C10_4.625Aa.fcs"), "B586-H")
MD_RTLC_07_ATP <- process(here("data", "MetDistRA21", "20210729_RTLC_S3_SYBR_RSG_ATP", "E10_4.875Aa.fcs"), "B586-H")
MD_RTLC_08_ATP <- process(here("data", "MetDistRA21", "20210729_RTLC_S3_SYBR_RSG_ATP", "G10_5.125Aa.fcs"), "B586-H")
MD_RTLC_09_ATP <- process(here("data", "MetDistRA21", "20210729_RTLC_S3_SYBR_RSG_ATP", "A11_5.375Aa.fcs"), "B586-H")
MD_RTLC_10_ATP <- process(here("data", "MetDistRA21", "20210729_RTLC_S3_SYBR_RSG_ATP", "C11_5.625Aa.fcs"), "B586-H")
MD_ATP <- as.data.frame(MD_RTLC_01_ATP$rac)
MD_ATP <- cbindX(MD_ATP, as.data.frame(MD_RTLC_02_ATP$rac), as.data.frame(MD_RTLC_03_ATP$rac), as.data.frame(MD_RTLC_04_ATP$rac), as.data.frame(MD_RTLC_05_ATP$rac), as.data.frame(MD_RTLC_06_ATP$rac), as.data.frame(MD_RTLC_07_ATP$rac), as.data.frame(MD_RTLC_08_ATP$rac), as.data.frame(MD_RTLC_09_ATP$rac), as.data.frame(MD_RTLC_10_ATP$rac))
colnames(MD_ATP) <- c("MD_RTLC_01", "MD_RTLC_02", "MD_RTLC_03", "MD_RTLC_04", "MD_RTLC_05", "MD_RTLC_06", "MD_RTLC_07", "MD_RTLC_08", "MD_RTLC_09", "MD_RTLC_10")
write.csv(MD_ATP, here('data', 'MetDistRA21', 'MD_ATP.csv'))
Samples <- read.csv(here("data","MetDistRA21", "MetDistRA21_Samples.csv"))
Chemostat_CPM <- read.csv(here("data", "MetDistRA21","20210729_RTLC_S3_SYBR_RSG_ATP","20210723_RTLC_S3_BP.csv"), header = FALSE)
Samples <- as.data.frame(BP_fxn(Chemostat_CPM, Samples, "RTLC"))
Samples <- subset(Samples, select = -c(DPM, DPMKills, MLeu, ugCLhr))
write.csv(Samples, here('data', 'MetDistRA21', 'MD_meta.csv'))
